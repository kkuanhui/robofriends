{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","comtainer/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","this","props","name","email","id","className","alt","src","React","Component","CardList","robots","map","user","i","key","username","SearchBox","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Errorboundry","state","hasError","error","info","setState","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCASC,E,iLAfF,IAAD,EACuBC,KAAKC,MAAzBC,EADH,EACGA,KAAMC,EADT,EACSA,MAAQC,EADjB,EACiBA,GAErB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACI,4BAAKF,GACL,2BAAIC,S,GATLK,IAAMC,WCqBVC,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,kBAAC,WAAD,KAEQA,EAAOC,KACH,SAACC,EAAMC,GACnB,OAAQ,kBAAC,EAAD,CACIC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdF,KAAMS,EAAOG,GAAGZ,KAChBc,SAAUL,EAAOG,GAAGE,SACpBb,MAAOQ,EAAOG,GAAGX,aCGtBc,E,iLAdF,IACEC,EAAgBlB,KAAKC,MAArBiB,aACP,OACI,yBAAKb,UAAU,OACX,2BAAOA,UAAU,mCACjBc,KAAK,SACLC,YAAY,gBACZC,SAAYH,S,GARJT,aCUTa,E,iLARP,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjE1B,KAAKC,MAAM0B,c,GAJPnB,IAAMC,WCmBZmB,G,kBAlBX,WAAY3B,GAAO,IAAD,8BACd,4CAAMA,KACD4B,MAAQ,CACTC,UAAU,GAHA,E,+EAMAC,EAAOC,GACrBhC,KAAKiC,SAAS,CAACH,UAAU,M,+BAGzB,OAAG9B,KAAK6B,MAAMC,SACH,wDAEA9B,KAAKC,MAAM0B,a,GAdHlB,cCwCZyB,E,YAlCX,aAAc,IAAD,8BACT,+CAWJC,eAAiB,SAACC,GACd,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAXzC,EAAKV,MAAQ,CACTlB,OAAQ,GACR0B,YAAa,IAJR,E,iFAOO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAS,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAKjC,IAAD,EAC0B5C,KAAK6B,MAA5BlB,EADH,EACGA,OAAQ0B,EADX,EACWA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEzD,OACI,yBAAK3C,UAAU,WACX,2CACA,kBAAC,EAAD,CAAWa,aAAclB,KAAKmC,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQkC,W,GA3BxBrC,IAAMC,WCCxByC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACL6B,QAAQ7B,MAAMA,EAAM8B,a","file":"static/js/main.be273fb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nclass Card extends React.Component{\n    render(){\n        const {name, email , id} = this.props;\n\n        return(\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n                <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    return(\n        <Fragment>\n            {\n                robots.map( \n                    (user, i) => {\n        return (<Card \n                    key={robots[i].id} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    username={robots[i].username} \n                    email={robots[i].email} \n                />)\n            }\n            )\n            }\n        </Fragment>\n    )\n}\n\nexport default CardList;","import React, {Component} from 'react';\n\nclass SearchBox extends Component{\n    render(){\n        const {SearchChange} = this.props;\n        return(\n            <div className=\"pa2\">\n                <input className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange = {SearchChange}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SearchBox;","import React from \"react\";\n\nclass Scroll extends React.Component{\n    render(){\n        return(\n            <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n                {this.props.children}\n            </div>\n        )\n    }\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass Errorboundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooooops! It is not good.</h1>\n        }else{\n            return this.props.children\n        }\n    }\n}\n\nexport default Errorboundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport Errorboundary from '../components/Errorboundry';\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    };\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {return response.json()})\n        .then(users =>{this.setState({robots: users})});\n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        return(\n            <div className='tc ma5 '>\n                <h1>RoboFriends</h1>\n                <SearchBox SearchChange={this.onSearchChange}/>\n                <Scroll>\n                    <Errorboundary>\n                        <CardList robots={filteredRobots} />\n                    </Errorboundary>\n                </Scroll>\n            </div>\n            )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\nimport App from './comtainer/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}