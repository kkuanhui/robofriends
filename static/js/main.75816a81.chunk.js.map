{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","components/CounterButton.js","components/Header.js","comtainer/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearce","searchField","initialStateRobots","isPending","robots","error","Card","this","props","name","email","id","className","alt","src","React","Component","CardList","console","log","map","user","i","key","username","SearchBox","nextProps","nextState","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Errorboundry","state","hasError","info","setState","CounterButton","updateCount","count","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.75816a81.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initialStateSearce = {searchField : ''}\n\nexport const searchRobots = (state = initialStateSearce, action = {}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\n\nclass Card extends React.Component{\n    render(){\n        const {name, email , id} = this.props;\n\n        return(\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n                <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots, isPending}) => {\n  return(\n    <Fragment>\n      {console.log('CardList', robots)}\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            username={robots[i].username}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React, {Component} from 'react';\n\nclass SearchBox extends Component{\n\n    shouldComponentUpdate(nextProps, nextState){\n        if(this.props !== nextProps){\n            return false\n        }\n        return true\n    }\n\n    render(){\n        const {SearchChange} = this.props;\n        return(\n            <div className=\"pa2\">\n                <input className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange = {SearchChange}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SearchBox;","import React from \"react\";\n\nclass Scroll extends React.Component{\n    render(){\n        return(\n            <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n                {this.props.children}\n            </div>\n        )\n    }\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass Errorboundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooooops! It is not good.</h1>\n        }else{\n            return this.props.children\n        }\n    }\n}\n\nexport default Errorboundry;","import React, { Fragment, PureComponent } from 'react';\n\nclass CounterButton extends PureComponent{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            count: 0,\n        }\n    }\n\n    // shouldComponentUpdate(nextProps, nextState){\n    //     if(this.state.count !== nextState.count){\n    //         return true\n    //     }\n    //     return false\n    // }\n\n    updateCount = () => {\n        // this.setState({count: this.state.count + 1})\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render(){\n\n        return(\n            <Fragment>\n                {console.log('CounterButton')}\n                <button color={this.props.color} onClick={this.updateCount}>\n                    Count : {this.state.count}\n                </button>\n            </Fragment>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Fragment } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component{\n\n\n    shouldComponentUpdate(nextProps, nextState){\n        return false\n    }\n\n    render(){\n        return(\n            <Fragment>\n                {console.log('Header')}\n                <h1>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </Fragment>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport Errorboundary from \"../components/Errorboundry\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n// Will be called at connect function.\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n// Will be called at connect function.\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  \n  render() {\n    const { onSearchChange, searchField, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    \n    return(\n      <div className=\"tc ma5 \">\n        <Header />\n        <SearchBox SearchChange={onSearchChange} />\n        <Scroll>\n          <Errorboundary>\n            <CardList robots={filteredRobots} isPending={isPending}/>\n          </Errorboundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// connect Redux's store to App.\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n})\n\nexport const requestRobots = () => (dispatch) =>{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response =>  response.json())\n      .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\nimport App from \"./comtainer/App\";\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\n\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, \n                document.getElementById(\"root\"));\n\nserviceWorker.unregister();"],"sourceRoot":""}